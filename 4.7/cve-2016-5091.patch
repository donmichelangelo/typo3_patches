From f1f7596812105db2b8afefe6f8cd610b9d145b30 Mon Sep 17 00:00:00 2001
From: Helmut Hummel <info@helhum.io>
Date: Wed, 18 May 2016 21:36:17 +0200
Subject: [PATCH] [SECURITY] Validate complete referring request

Instead of only checking for valid request arguments by using a hmac,
we now check the complete request including action, controller and vendor
to avoid spoofing these arguments and bypassing other security checks
during forwarding to the referring action.

Additionally, ReferringRequest is now separate from regular Request.
The meaning of properties starting with "@" is only valid for
processing a referring request. To avoid mixed concerns in using
the same Request implementation for regular requests and referring
requests, they are separated now.

Resolves: #76231
Resolves: #76256
Releases: master, 7.6, 6.2
Change-Id: I9ce59fd9df60e84251cc6f75e6b5f032da0b3c64
---
 .../Classes/MVC/Controller/ActionController.php    |    6 ++-
 typo3/sysext/extbase/Classes/MVC/Request.php       |   21 +-------
 .../extbase/Classes/MVC/Web/ReferringRequest.php   |   52 ++++++++++++++++++++
 typo3/sysext/extbase/Classes/MVC/Web/Request.php   |   34 ++++++++-----
 typo3/sysext/extbase/ext_autoload.php              |    1 +
 .../fluid/Classes/ViewHelpers/FormViewHelper.php   |   40 +++++++++++++++
 6 files changed, 121 insertions(+), 33 deletions(-)
 create mode 100644 typo3/sysext/extbase/Classes/MVC/Web/ReferringRequest.php

diff --git a/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php b/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
index 0b5ec97..ba56ee7 100644
--- a/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
+++ b/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
@@ -469,8 +469,10 @@ class Tx_Extbase_MVC_Controller_ActionController extends Tx_Extbase_MVC_Controll
 			if ($errorFlashMessage !== FALSE) {
 				$this->flashMessageContainer->add($errorFlashMessage, '', t3lib_FlashMessage::ERROR);
 			}
-
-			$referrer = $this->request->getInternalArgument('__referrer');
+			$referrer = NULL;
+			if ($this->request instanceof Tx_Extbase_MVC_Web_Request) {
+				$referrer = $this->request->getValidatedReferrerArguments();
+			}
 			if ($referrer !== NULL) {
 				$this->forward($referrer['actionName'], $referrer['controllerName'], $referrer['extensionName'], $this->request->getArguments());
 			}
diff --git a/typo3/sysext/extbase/Classes/MVC/Request.php b/typo3/sysext/extbase/Classes/MVC/Request.php
index 7d0b505..f666720 100644
--- a/typo3/sysext/extbase/Classes/MVC/Request.php
+++ b/typo3/sysext/extbase/Classes/MVC/Request.php
@@ -340,25 +340,8 @@ class Tx_Extbase_MVC_Request implements Tx_Extbase_MVC_RequestInterface {
 			$this->internalArguments[$argumentName] = $value;
 			return;
 		}
-
-		switch ($argumentName) {
-			case '@extension':
-				$this->setControllerExtensionName($value);
-				break;
-			case '@subpackage':
-				$this->setControllerSubpackageKey($value);
-				break;
-			case '@controller':
-				$this->setControllerName($value);
-				break;
-			case '@action':
-				$this->setControllerActionName($value);
-				break;
-			case '@format':
-				$this->setFormat($value);
-				break;
-			default:
-				$this->arguments[$argumentName] = $value;
+		if (!in_array($argumentName, array('@extension', '@subpackage', '@controller', '@action', '@format', '@vendor'), true)) {
+			$this->arguments[$argumentName] = $value;
 		}
 	}

diff --git a/typo3/sysext/extbase/Classes/MVC/Web/ReferringRequest.php b/typo3/sysext/extbase/Classes/MVC/Web/ReferringRequest.php
new file mode 100644
index 0000000..cb7695c
--- /dev/null
+++ b/typo3/sysext/extbase/Classes/MVC/Web/ReferringRequest.php
@@ -0,0 +1,52 @@
+<?php
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+/**
+ * Represents a referring web request.
+ *
+ * @api
+ */
+class Tx_Extbase_MVC_Web_ReferringRequest extends Tx_Extbase_MVC_Web_Request
+{
+	/**
+	 * Sets the value of the specified argument
+	 *
+	 * @param string $argumentName Name of the argument to set
+	 * @param mixed $value The new value
+	 */
+	public function setArgument($argumentName, $value)
+	{
+		parent::setArgument($argumentName, $value);
+
+		switch ($argumentName) {
+			case '@extension':
+				$this->setControllerExtensionName($value);
+				break;
+			case '@subpackage':
+				$this->setControllerSubpackageKey($value);
+				break;
+			case '@controller':
+				$this->setControllerName($value);
+				break;
+			case '@action':
+				$this->setControllerActionName($value);
+				break;
+			case '@format':
+				$this->setFormat($value);
+				break;
+		}
+	}
+
+}
+?>
\ No newline at end of file
diff --git a/typo3/sysext/extbase/Classes/MVC/Web/Request.php b/typo3/sysext/extbase/Classes/MVC/Web/Request.php
index 36e036a..beddc8a 100644
--- a/typo3/sysext/extbase/Classes/MVC/Web/Request.php
+++ b/typo3/sysext/extbase/Classes/MVC/Web/Request.php
@@ -216,26 +216,36 @@ class Tx_Extbase_MVC_Web_Request extends Tx_Extbase_MVC_Request {
 	/**
 	 * Get a freshly built request object pointing to the Referrer.
 	 *
-	 * @return Request the referring request, or NULL if no referrer found
+	 * @return Tx_Extbase_MVC_Web_ReferringRequest the referring request, or NULL if no referrer found
 	 */
 	public function getReferringRequest() {
-		if (isset($this->internalArguments['__referrer']) && is_array($this->internalArguments['__referrer'])) {
-			$referrerArray = $this->internalArguments['__referrer'];
-
-			$referringRequest = new Tx_Extbase_MVC_Web_Request;
-
+		$referrerArray = $this->getValidatedReferrerArguments();
+		if ($referrerArray !== NULL) {
 			$arguments = array();
-			if (isset($referrerArray['arguments'])) {
-				$serializedArgumentsWithHmac = $referrerArray['arguments'];
-				$serializedArguments = $this->hashService->validateAndStripHmac($serializedArgumentsWithHmac);
-				$arguments = unserialize(base64_decode($serializedArguments));
-				unset($referrerArray['arguments']);
+			if (isset($this->internalArguments['__referrer']['arguments'])) {
+				$arguments = unserialize(base64_decode($this->hashService->validateAndStripHmac($this->internalArguments['__referrer']['arguments'])));
 			}
-
+			$referringRequest = new Tx_Extbase_MVC_Web_ReferringRequest();
 			$referringRequest->setArguments(Tx_Extbase_Utility_Arrays::arrayMergeRecursiveOverrule($arguments, $referrerArray));
 			return $referringRequest;
 		}
 		return NULL;
 	}
+
+	/**
+	 * @return array|NULL
+	 * @throws Tx_Extbase_Security_Exception_InvalidArgumentForHashGeneration
+	 * @throws Tx_Extbase_Security_Exception_InvalidHash
+	 */
+	public function getValidatedReferrerArguments() {
+		if (isset($this->internalArguments['__referrer']['@request'])) {
+			$referrerArguments = unserialize($this->hashService->validateAndStripHmac($this->internalArguments['__referrer']['@request']));
+			if (!is_array($referrerArguments)) {
+				$referrerArguments = NULL;
+			}
+			return $referrerArguments;
+		}
+		return NULL;
+	}
 }
 ?>
\ No newline at end of file
diff --git a/typo3/sysext/extbase/ext_autoload.php b/typo3/sysext/extbase/ext_autoload.php
index 9256680..060d7c6 100644
--- a/typo3/sysext/extbase/ext_autoload.php
+++ b/typo3/sysext/extbase/ext_autoload.php
@@ -75,6 +75,7 @@ return array(
 	'tx_extbase_mvc_web_abstractrequesthandler' => $extensionClassesPath . 'MVC/Web/AbstractRequestHandler.php',
 	'tx_extbase_mvc_web_backendrequesthandler' => $extensionClassesPath . 'MVC/Web/BackendRequestHandler.php',
 	'tx_extbase_mvc_web_frontendrequesthandler' => $extensionClassesPath . 'MVC/Web/FrontendRequestHandler.php',
+	'tx_extbase_mvc_web_referringrequest' => $extensionClassesPath . 'MVC/Web/ReferringRequest.php',
 	'tx_extbase_mvc_web_request' => $extensionClassesPath . 'MVC/Web/Request.php',
 	'tx_extbase_mvc_web_requestbuilder' => $extensionClassesPath . 'MVC/Web/RequestBuilder.php',
 	'tx_extbase_mvc_web_response' => $extensionClassesPath . 'MVC/Web/Response.php',
diff --git a/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php b/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
index 1c04413..02d3c79 100644
--- a/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
+++ b/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
@@ -82,6 +82,11 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 	protected $formActionUriArguments;

 	/**
+	 * @bool
+	 */
+	private $securedReferrerFieldRendered = false;
+
+	/**
 	 * @var Tx_Extbase_Configuration_ConfigurationManagerInterface
 	 */
 	protected $configurationManager;
@@ -183,6 +188,7 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 		$content .= $this->renderHiddenIdentityField($this->arguments['object'], $this->getFormObjectName());
 		$content .= $this->renderAdditionalIdentityFields();
 		$content .= $this->renderHiddenReferrerFields();
+		$content .= $this->renderHiddenSecuredReferrerField();
 		$content .= $this->renderRequestHashField(); // Render hmac after everything else has been rendered
 		$content .= LF . '</div>' . LF;
 		$content .= $formContent;
@@ -270,7 +276,41 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 			$result .= '<input type="hidden" name="' . $this->prefixFieldName('__referrer[controllerName]') . '" value="' . $controllerName . '" />' . chr(10);
 			$result .= '<input type="hidden" name="' . $this->prefixFieldName('__referrer[actionName]') . '" value="' . $actionName . '" />' . chr(10);
 		}
+		$result .= $this->renderHiddenSecuredReferrerField();
+		return $result;
+	}

+	/**
+	 * Renders hidden form field for secured referrer information about the current controller and action.
+	 *
+	 * This method is called twice, to deal with subclasses of this class in a most compatible way
+	 *
+	 * @return string Hidden field with secured referrer information
+	 */
+	protected function renderHiddenSecuredReferrerField()
+	{
+		if ($this->securedReferrerFieldRendered) {
+			return '';
+		}
+		$request = $this->renderingContext->getControllerContext()->getRequest();
+		$extensionName = $request->getControllerExtensionName();
+		$controllerName = $request->getControllerName();
+		$actionName = $request->getControllerActionName();
+		if ($this->configurationManager->isFeatureEnabled('rewrittenPropertyMapper')) {
+			$actionRequest = array(
+				'@extension' => $extensionName,
+				'@controller' => $controllerName,
+				'@action' => $actionName,
+			);
+		} else {
+			$actionRequest = array(
+				'extensionName' => $extensionName,
+				'controllerName' => $controllerName,
+				'actionName' => $actionName,
+			);
+		}
+		$result = '<input type="hidden" name="' . $this->prefixFieldName('__referrer[@request]') . '" value="' . htmlspecialchars($this->hashService->appendHmac(serialize($actionRequest))) . '" />' . chr(10);
+		$this->securedReferrerFieldRendered = true;
 		return $result;
 	}

--
1.7.10.4
