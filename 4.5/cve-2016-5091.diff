From 6ccd6f8592da68c8e0dc38010ea4fbf548e038bb Mon Sep 17 00:00:00 2001
From: =?utf8?q?Steffen=20Mu=CC=88ller?= <typo3@t3node.com>
Date: Thu, 19 May 2016 18:47:01 +0200
Subject: [PATCH] [SECURITY] Validate complete referring request

Instead of only checking for valid request arguments by using a hmac,
we now check the complete request including action, controller and vendor
to avoid spoofing these arguments and bypassing other security checks
during forwarding to the referring action.

Additionally, ReferringRequest is now separate from regular Request.
The meaning of properties starting with "@" is only valid for
processing a referring request. To avoid mixed concerns in using
the same Request implementation for regular requests and referring
requests, they are separated now.

Resolves: #76231
Resolves: #76256
Releases: master, 7.6, 6.2
Change-Id: I9ce59fd9df60e84251cc6f75e6b5f032da0b3c64
---
 .../Classes/MVC/Controller/ActionController.php    |   22 ++++++++-
 .../Classes/Security/Cryptography/HashService.php  |   43 ++++++++++++++++++
 .../Classes/Security/Exception/InvalidHash.php     |   34 ++++++++++++++
 typo3/sysext/extbase/ext_autoload.php              |    4 +-
 .../fluid/Classes/ViewHelpers/FormViewHelper.php   |   48 ++++++++++++++++++++
 5 files changed, 148 insertions(+), 3 deletions(-)
 create mode 100644 typo3/sysext/extbase/Classes/Security/Exception/InvalidHash.php

diff --git a/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php b/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
index b48a0ec..e11b50c 100644
--- a/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
+++ b/typo3/sysext/extbase/Classes/MVC/Controller/ActionController.php
@@ -41,6 +41,11 @@ class Tx_Extbase_MVC_Controller_ActionController extends Tx_Extbase_MVC_Controll
 	protected $reflectionService;

 	/**
+	 * @var Tx_Extbase_Security_Cryptography_HashService
+	 */
+	protected $cryptographyHashService;
+
+	/**
 	 * The current view, as resolved by resolveView()
 	 *
 	 * @var Tx_Extbase_MVC_View_ViewInterface
@@ -101,6 +106,16 @@ class Tx_Extbase_MVC_Controller_ActionController extends Tx_Extbase_MVC_Controll
 	}

 	/**
+	 * Inject a cryptography hash service
+	 *
+	 * @param Tx_Extbase_Security_Cryptography_HashService $cryptographyHashService The cryptography hash service
+	 * @return void
+	 */
+	public function injectCryptographyHashService(Tx_Extbase_Security_Cryptography_HashService $cryptographyHashService) {
+		$this->cryptographyHashService = $cryptographyHashService;
+	}
+
+	/**
 	 * Checks if the current request type is supported by the controller.
 	 *
 	 * If your controller only supports certain request types, either
@@ -393,8 +408,11 @@ class Tx_Extbase_MVC_Controller_ActionController extends Tx_Extbase_MVC_Controll
 		}

 		if ($this->request->hasArgument('__referrer')) {
-			$referrer = $this->request->getArgument('__referrer');
-			$this->forward($referrer['actionName'], $referrer['controllerName'], $referrer['extensionName'], $this->request->getArguments());
+			$referrerArguments = $this->request->getArgument('__referrer');
+			if (isset($referrerArguments['@request'])) {
+				$referrer = unserialize($this->cryptographyHashService->validateAndStripHmac($referrerArguments['@request']));
+				$this->forward($referrer['actionName'], $referrer['controllerName'], $referrer['extensionName'], $this->request->getArguments());
+			}
 		}

 		$message = 'An error occurred while trying to call ' . get_class($this) . '->' . $this->actionMethodName . '().' . PHP_EOL;
diff --git a/typo3/sysext/extbase/Classes/Security/Cryptography/HashService.php b/typo3/sysext/extbase/Classes/Security/Cryptography/HashService.php
index 2e4ca3b..97ac3da 100644
--- a/typo3/sysext/extbase/Classes/Security/Cryptography/HashService.php
+++ b/typo3/sysext/extbase/Classes/Security/Cryptography/HashService.php
@@ -60,5 +60,48 @@ class Tx_Extbase_Security_Cryptography_HashService implements t3lib_singleton {
 	public function validateHash($string, $hash) {
 		return ($this->generateHash($string) === $hash);
 	}
+
+	/**
+	 * Appends a hash (HMAC) to a given string and returns the result
+	 *
+	 * @param string $string The string for which a hash should be generated
+	 * @return string The original string with HMAC of the string appended
+	 * @see generateHash()
+	 * @todo Mark as API once it is more stable
+	 */
+	public function appendHmac($string) {
+		$hmac = $this->generateHash($string);
+
+		return $string . $hmac;
+	}
+
+	/**
+	 * Tests if the last 40 characters of a given string $string
+	 * matches the HMAC of the rest of the string and, if true,
+	 * returns the string without the HMAC. In case of a HMAC
+	 * validation error, an exception is thrown.
+	 *
+	 * @param string $string The string with the HMAC appended (in the format 'string<HMAC>')
+	 * @return string the original string without the HMAC, if validation was successful
+	 * @see validateHash()
+	 * @throws Tx_Extbase_Security_Exception_InvalidArgumentForHashGeneration if the given string is not well-formatted
+	 * @throws Tx_Extbase_Security_Exception_InvalidHashException if the hash did not fit to the data.
+	 * @todo Mark as API once it is more stable
+	 */
+	public function validateAndStripHmac($string) {
+		if (!is_string($string)) {
+			throw new Tx_Extbase_Security_Exception_InvalidArgumentForHashGeneration('A hash can only be validated for a string, but "' . gettype($string) . '" was given.', 1320829762);
+		}
+		if (strlen($string) < 40) {
+			throw new Tx_Extbase_Security_Exception_InvalidArgumentForHashGeneration('A hashed string must contain at least 40 characters, the given string was only ' . strlen($string) . ' characters long.', 1320830276);
+		}
+		$stringWithoutHmac = substr($string, 0, -40);
+		if (!$this->validateHash($stringWithoutHmac, substr($string, -40))) {
+			throw new Tx_Extbase_Security_Exception_InvalidHashException('The given string was not appended with a valid HMAC.', 1320830018);
+		}
+
+		return $stringWithoutHmac;
+	}
 }
+
 ?>
\ No newline at end of file
diff --git a/typo3/sysext/extbase/Classes/Security/Exception/InvalidHash.php b/typo3/sysext/extbase/Classes/Security/Exception/InvalidHash.php
new file mode 100644
index 0000000..6ea40ca
--- /dev/null
+++ b/typo3/sysext/extbase/Classes/Security/Exception/InvalidHash.php
@@ -0,0 +1,34 @@
+<?php
+/***************************************************************
+*  Copyright notice
+*
+*  (c) 2016 Steffen MÃ¼ller <typo3@t3node.com>
+*  All rights reserved
+*
+*  This class is a backport of the corresponding class of FLOW3.
+*  All credits go to the v5 team.
+*
+*  This script is part of the TYPO3 project. The TYPO3 project is
+*  free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; either version 2 of the License, or
+*  (at your option) any later version.
+*
+*  The GNU General Public License can be found at
+*  http://www.gnu.org/copyleft/gpl.html.
+*
+*  This script is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  GNU General Public License for more details.
+*
+*  This copyright notice MUST APPEAR in all copies of the script!
+***************************************************************/
+
+/**
+ * An "InvalidHash" Exception, thrown when a HMAC validation failed.
+ */
+class Tx_Extbase_Security_Exception_InvalidHashException extends Tx_Extbase_Security_Exception {
+}
+
+?>
\ No newline at end of file
diff --git a/typo3/sysext/extbase/ext_autoload.php b/typo3/sysext/extbase/ext_autoload.php
index 0afb494..742913c 100644
--- a/typo3/sysext/extbase/ext_autoload.php
+++ b/typo3/sysext/extbase/ext_autoload.php
@@ -1,6 +1,6 @@
 <?php
 // DO NOT CHANGE THIS FILE! It is automatically generated by Tx_Extbase_Utility_Extension::createAutoloadRegistryForExtension.
-// This file was generated on 2011-01-21 14:39
+// This file was generated on 2016-05-19 18:43

 $extensionClassesPath = t3lib_extMgm::extPath('extbase') . 'Classes/';
 return array(
@@ -121,6 +121,7 @@ return array(
 	'tx_extbase_persistence_typo3querysettings' => $extensionClassesPath . 'Persistence/Typo3QuerySettings.php',
 	'tx_extbase_persistence_exception_cleanstatenotmemorized' => $extensionClassesPath . 'Persistence/Exception/CleanStateNotMemorized.php',
 	'tx_extbase_persistence_exception_illegalobjecttype' => $extensionClassesPath . 'Persistence/Exception/IllegalObjectType.php',
+	'tx_extbase_persistence_exception_inconsistentquerysettings' => $extensionClassesPath . 'Persistence/Exception/InconsistentQuerySettings.php',
 	'tx_extbase_persistence_exception_invalidclass' => $extensionClassesPath . 'Persistence/Exception/InvalidClass.php',
 	'tx_extbase_persistence_exception_invalidnumberofconstraints' => $extensionClassesPath . 'Persistence/Exception/InvalidNumberOfConstraints.php',
 	'tx_extbase_persistence_exception_invalidpropertytype' => $extensionClassesPath . 'Persistence/Exception/InvalidPropertyType.php',
@@ -199,6 +200,7 @@ return array(
 	'tx_extbase_security_cryptography_hashservice' => $extensionClassesPath . 'Security/Cryptography/HashService.php',
 	'tx_extbase_security_exception_invalidargumentforhashgeneration' => $extensionClassesPath . 'Security/Exception/InvalidArgumentForHashGeneration.php',
 	'tx_extbase_security_exception_invalidargumentforrequesthashgeneration' => $extensionClassesPath . 'Security/Exception/InvalidArgumentForRequestHashGeneration.php',
+	'tx_extbase_security_exception_invalidhashexception' => $extensionClassesPath . 'Security/Exception/InvalidHash.php',
 	'tx_extbase_security_exception_syntacticallywrongrequesthash' => $extensionClassesPath . 'Security/Exception/SyntacticallyWrongRequestHash.php',
 	'tx_extbase_utility_arrays' => $extensionClassesPath . 'Utility/Arrays.php',
 	'tx_extbase_utility_cache' => $extensionClassesPath . 'Utility/Cache.php',
diff --git a/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php b/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
index 22bef5c..bc60fc7 100644
--- a/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
+++ b/typo3/sysext/fluid/Classes/ViewHelpers/FormViewHelper.php
@@ -65,6 +65,11 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 	protected $requestHashService;

 	/**
+	 * @var Tx_Extbase_Security_Cryptography_HashService
+	 */
+	protected $cryptographyHashService;
+
+	/**
 	 * We need the arguments of the formActionUri on requesthash calculation
 	 * therefore we will store them in here right after calling uriBuilder
 	 *
@@ -73,6 +78,11 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 	protected $formActionUriArguments;

 	/**
+	 * @var boolean
+	 */
+	private $securedReferrerFieldRendered = FALSE;
+
+	/**
 	 * Inject a request hash service
 	 *
 	 * @param Tx_Extbase_Security_Channel_RequestHashService $requestHashService The request hash service
@@ -84,6 +94,16 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 	}

 	/**
+	 * Inject a cryptography hash service
+	 *
+	 * @param Tx_Extbase_Security_Cryptography_HashService $cryptographyHashService The cryptography hash service
+	 * @return void
+	 */
+	public function injectCryptographyHashService(Tx_Extbase_Security_Cryptography_HashService $cryptographyHashService) {
+		$this->cryptographyHashService = $cryptographyHashService;
+	}
+
+	/**
 	 * Initialize arguments.
 	 *
 	 * @return void
@@ -146,6 +166,7 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 		}
 		$content .= $this->renderHiddenIdentityField($this->arguments['object'], $this->getFormObjectName());
 		$content .= $this->renderAdditionalIdentityFields();
+		$content .= $this->renderHiddenSecuredReferrerField();
 		$content .= $this->renderHiddenReferrerFields();
 		$content .= $this->renderRequestHashField(); // Render hmac after everything else has been rendered
 		$content .= LF . '</div>' . LF;
@@ -226,10 +247,37 @@ class Tx_Fluid_ViewHelpers_FormViewHelper extends Tx_Fluid_ViewHelpers_Form_Abst
 		$result .= '<input type="hidden" name="' . $this->prefixFieldName('__referrer[extensionName]') . '" value="' . $extensionName . '" />' . chr(10);
 		$result .= '<input type="hidden" name="' . $this->prefixFieldName('__referrer[controllerName]') . '" value="' . $controllerName . '" />' . chr(10);
 		$result .= '<input type="hidden" name="' . $this->prefixFieldName('__referrer[actionName]') . '" value="' . $actionName . '" />' . chr(10);
+		$result .= $this->renderHiddenSecuredReferrerField();
 		return $result;
 	}

 	/**
+	 * Renders hidden form field for secured referrer information about the current controller and action.
+	 *
+	 * This method is called twice, to deal with subclasses of this class in a most compatible way
+	 *
+	 * @return string Hidden field with secured referrer information
+	 */
+	protected function renderHiddenSecuredReferrerField() {
+		if ($this->securedReferrerFieldRendered) {
+			return '';
+		}
+		$request = $this->controllerContext->getRequest();
+		$extensionName = $request->getControllerExtensionName();
+		$controllerName = $request->getControllerName();
+		$actionName = $request->getControllerActionName();
+		$actionRequest = array(
+			'extensionName' => $extensionName,
+			'controllerName' => $controllerName,
+			'actionName' => $actionName,
+		);
+		$result = '<input type="hidden" name="' . $this->prefixFieldName('__referrer[@request]') . '" value="' . htmlspecialchars($this->cryptographyHashService->appendHmac(serialize($actionRequest))) . '" />' . chr(10);
+		$this->securedReferrerFieldRendered = TRUE;
+		return $result;
+	}
+
+
+	/**
 	 * Adds the form object name to the ViewHelperVariableContainer if "objectName" argument or "name" attribute is specified.
 	 *
 	 * @return void
--
1.7.10.4
